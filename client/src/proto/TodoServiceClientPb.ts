/**
 * @fileoverview gRPC-Web generated client stub for todo.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: proto/todo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_todo_pb from '../proto/todo_pb';


export class TodoServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateTodo = new grpcWeb.MethodDescriptor(
    '/todo.v1.TodoService/CreateTodo',
    grpcWeb.MethodType.UNARY,
    proto_todo_pb.CreateTodoRequest,
    proto_todo_pb.CreateTodoResponse,
    (request: proto_todo_pb.CreateTodoRequest) => {
      return request.serializeBinary();
    },
    proto_todo_pb.CreateTodoResponse.deserializeBinary
  );

  createTodo(
    request: proto_todo_pb.CreateTodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_todo_pb.CreateTodoResponse>;

  createTodo(
    request: proto_todo_pb.CreateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_todo_pb.CreateTodoResponse) => void): grpcWeb.ClientReadableStream<proto_todo_pb.CreateTodoResponse>;

  createTodo(
    request: proto_todo_pb.CreateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_todo_pb.CreateTodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.v1.TodoService/CreateTodo',
        request,
        metadata || {},
        this.methodDescriptorCreateTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.v1.TodoService/CreateTodo',
    request,
    metadata || {},
    this.methodDescriptorCreateTodo);
  }

  methodDescriptorGetTodo = new grpcWeb.MethodDescriptor(
    '/todo.v1.TodoService/GetTodo',
    grpcWeb.MethodType.UNARY,
    proto_todo_pb.GetTodoRequest,
    proto_todo_pb.GetTodoResponse,
    (request: proto_todo_pb.GetTodoRequest) => {
      return request.serializeBinary();
    },
    proto_todo_pb.GetTodoResponse.deserializeBinary
  );

  getTodo(
    request: proto_todo_pb.GetTodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_todo_pb.GetTodoResponse>;

  getTodo(
    request: proto_todo_pb.GetTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_todo_pb.GetTodoResponse) => void): grpcWeb.ClientReadableStream<proto_todo_pb.GetTodoResponse>;

  getTodo(
    request: proto_todo_pb.GetTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_todo_pb.GetTodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.v1.TodoService/GetTodo',
        request,
        metadata || {},
        this.methodDescriptorGetTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.v1.TodoService/GetTodo',
    request,
    metadata || {},
    this.methodDescriptorGetTodo);
  }

  methodDescriptorListTodo = new grpcWeb.MethodDescriptor(
    '/todo.v1.TodoService/ListTodo',
    grpcWeb.MethodType.UNARY,
    proto_todo_pb.ListTodoRequest,
    proto_todo_pb.ListTodoResponse,
    (request: proto_todo_pb.ListTodoRequest) => {
      return request.serializeBinary();
    },
    proto_todo_pb.ListTodoResponse.deserializeBinary
  );

  listTodo(
    request: proto_todo_pb.ListTodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_todo_pb.ListTodoResponse>;

  listTodo(
    request: proto_todo_pb.ListTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_todo_pb.ListTodoResponse) => void): grpcWeb.ClientReadableStream<proto_todo_pb.ListTodoResponse>;

  listTodo(
    request: proto_todo_pb.ListTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_todo_pb.ListTodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.v1.TodoService/ListTodo',
        request,
        metadata || {},
        this.methodDescriptorListTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.v1.TodoService/ListTodo',
    request,
    metadata || {},
    this.methodDescriptorListTodo);
  }

  methodDescriptorDeleteTodo = new grpcWeb.MethodDescriptor(
    '/todo.v1.TodoService/DeleteTodo',
    grpcWeb.MethodType.UNARY,
    proto_todo_pb.DeleteTodoRequest,
    proto_todo_pb.DeleteTodoResponse,
    (request: proto_todo_pb.DeleteTodoRequest) => {
      return request.serializeBinary();
    },
    proto_todo_pb.DeleteTodoResponse.deserializeBinary
  );

  deleteTodo(
    request: proto_todo_pb.DeleteTodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_todo_pb.DeleteTodoResponse>;

  deleteTodo(
    request: proto_todo_pb.DeleteTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_todo_pb.DeleteTodoResponse) => void): grpcWeb.ClientReadableStream<proto_todo_pb.DeleteTodoResponse>;

  deleteTodo(
    request: proto_todo_pb.DeleteTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_todo_pb.DeleteTodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.v1.TodoService/DeleteTodo',
        request,
        metadata || {},
        this.methodDescriptorDeleteTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.v1.TodoService/DeleteTodo',
    request,
    metadata || {},
    this.methodDescriptorDeleteTodo);
  }

  methodDescriptorUpdateTodo = new grpcWeb.MethodDescriptor(
    '/todo.v1.TodoService/UpdateTodo',
    grpcWeb.MethodType.UNARY,
    proto_todo_pb.UpdateTodoRequest,
    proto_todo_pb.UpdateTodoResponse,
    (request: proto_todo_pb.UpdateTodoRequest) => {
      return request.serializeBinary();
    },
    proto_todo_pb.UpdateTodoResponse.deserializeBinary
  );

  updateTodo(
    request: proto_todo_pb.UpdateTodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_todo_pb.UpdateTodoResponse>;

  updateTodo(
    request: proto_todo_pb.UpdateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_todo_pb.UpdateTodoResponse) => void): grpcWeb.ClientReadableStream<proto_todo_pb.UpdateTodoResponse>;

  updateTodo(
    request: proto_todo_pb.UpdateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_todo_pb.UpdateTodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.v1.TodoService/UpdateTodo',
        request,
        metadata || {},
        this.methodDescriptorUpdateTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.v1.TodoService/UpdateTodo',
    request,
    metadata || {},
    this.methodDescriptorUpdateTodo);
  }

}

